========iter:  0 ============
Device being used: cuda
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
 77%|██████████████████████████████████████████████████████████████████████████████▌                       | 77/100 [00:01<00:00, 47.41it/s]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
========iter:  1 ============
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:02<00:00, 48.92it/s]
Traceback (most recent call last):
  File "/users/ug21/jvaditya/CS337_Project/CS337_HCR/video_style.py", line 552, in <module>
    video_style_transfer(
  File "/users/ug21/jvaditya/CS337_Project/CS337_HCR/video_style.py", line 179, in __call__
    prev_warped = self.warp(p_prev_frame.squeeze(0), rev_flow).unsqueeze(0) # note that we are using the reverse flow because of the semantics of cv2.remap
  File "/users/ug21/jvaditya/CS337_Project/CS337_HCR/video_style.py", line 102, in warp
    if not np.isclose(temp, temp2):
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
cpu cpu
check-input tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
check-input2 tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]