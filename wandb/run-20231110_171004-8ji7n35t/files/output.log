========iter:  0 ============
Device being used: cuda
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
 69%|██████████████████████████████████████████████████████████████████████▍                               | 69/100 [00:01<00:00, 42.22it/s]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
========iter:  1 ============

100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:02<00:00, 44.22it/s]
cpu cpu
check-input tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
check-input2 tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
array([[ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       ...,
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True],
       [ True,  True,  True, ...,  True,  True,  True]])
False
68159
385
  Cell In[5], line 1
    (temp-temp2)**2.mean()
                    ^
SyntaxError: invalid syntax
4.99941e-06
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 184 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
tensor(168.9527)
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
  8%|████████▎                                                                                               | 4/50 [00:00<00:01, 38.34it/s]
True 0
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 103463.8125
content_loss = 313970.375
stt_loss = 0.0
tv_loss= 177.69351196289062
tensor(6.9903, device='cuda:0')
tensor(6.9903, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 103464.125
content_loss = 313968.15625
stt_loss = 8.73784511412623e-09
tv_loss= 177.6935272216797
tensor(6.9883, device='cuda:0')
tensor(6.9883, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 103583.859375
content_loss = 294810.71875
stt_loss = 7.077051162719727
tv_loss= 177.75247192382812
tensor(5.3376, device='cuda:0')
tensor(5.3376, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 98168.5859375
content_loss = 215458.578125
stt_loss = 668.7697143554688
tv_loss= 180.4347381591797
tensor(3.4683, device='cuda:0')
tensor(3.4683, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 78835.4375
content_loss = 181788.5
stt_loss = 2143.9853515625
tv_loss= 186.45166015625
tensor(2.8087, device='cuda:0')
tensor(2.8087, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 65582.8359375
content_loss = 161709.78125
stt_loss = 5186.8671875
tv_loss= 197.3426055908203
tensor(2.5512, device='cuda:0')
tensor(2.5512, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 62742.15625
content_loss = 145969.28125
stt_loss = 6884.8935546875
tv_loss= 201.7919464111328
tensor(2.5016, device='cuda:0')
tensor(2.5016, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 58138.078125
content_loss = 136566.234375
stt_loss = 7526.19873046875
tv_loss= 202.203857421875
tensor(1.1583, device='cuda:0')
tensor(1.1583, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 54972.01171875
content_loss = 128255.265625
stt_loss = 8299.6318359375
tv_loss= 202.3258819580078
tensor(1.6664, device='cuda:0')
tensor(1.6664, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 51783.33984375
content_loss = 122645.359375
stt_loss = 9640.3466796875
tv_loss= 204.21092224121094
tensor(2.1155, device='cuda:0')
tensor(2.1155, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 50978.08984375
content_loss = 116702.7734375
stt_loss = 10706.1298828125
tv_loss= 205.85205078125
tensor(2.8691, device='cuda:0')
tensor(2.8691, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 50442.38671875
content_loss = 112185.578125
stt_loss = 11080.724609375
tv_loss= 206.2619171142578
tensor(1.0023, device='cuda:0')
tensor(1.0023, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 49880.77734375
content_loss = 108048.09375
stt_loss = 11441.4501953125
tv_loss= 206.559326171875
tensor(0.9188, device='cuda:0')
tensor(0.9188, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 48721.0078125
content_loss = 105018.8359375
stt_loss = 12008.123046875
tv_loss= 207.3843536376953
tensor(1.4909, device='cuda:0')
tensor(1.4909, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 48439.02734375
content_loss = 101922.203125
stt_loss = 12433.9306640625
tv_loss= 208.05284118652344
tensor(1.0556, device='cuda:0')
tensor(1.0556, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 48173.640625
content_loss = 99404.9375
stt_loss = 12549.2119140625
tv_loss= 208.0292510986328
tensor(0.7553, device='cuda:0')
tensor(0.7553, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 47655.32421875
content_loss = 97311.84375
stt_loss = 12822.111328125
tv_loss= 208.16873168945312
tensor(0.6438, device='cuda:0')
tensor(0.6438, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 46878.6953125
content_loss = 95736.9609375
stt_loss = 13210.744140625
tv_loss= 208.66201782226562
tensor(0.8342, device='cuda:0')
tensor(0.8342, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 46557.6015625
content_loss = 93985.03125
stt_loss = 13451.7548828125
tv_loss= 208.98191833496094
tensor(0.6724, device='cuda:0')
tensor(0.6724, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 46049.3671875
content_loss = 92516.9296875
stt_loss = 13728.908203125
tv_loss= 209.442138671875
tensor(0.9749, device='cuda:0')
tensor(0.9749, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 45713.41015625
content_loss = 91048.7890625
stt_loss = 13976.5869140625
tv_loss= 209.88186645507812
tensor(0.8301, device='cuda:0')
tensor(0.8301, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 45418.33203125
content_loss = 89733.09375
stt_loss = 14208.5341796875
tv_loss= 210.3236083984375
tensor(0.9775, device='cuda:0')
tensor(0.9775, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 45292.41796875
content_loss = 88423.2578125
stt_loss = 14353.1796875
tv_loss= 210.57656860351562
tensor(0.5678, device='cuda:0')
tensor(0.5678, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 45048.30859375
content_loss = 87340.25
stt_loss = 14490.4921875
tv_loss= 210.81040954589844
tensor(0.5811, device='cuda:0')
tensor(0.5811, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44682.59375
content_loss = 86432.4609375
stt_loss = 14689.9873046875
tv_loss= 211.17788696289062
tensor(0.7364, device='cuda:0')
tensor(0.7364, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44584.6953125
content_loss = 85469.0703125
stt_loss = 14769.73828125
tv_loss= 211.27285766601562
tensor(0.6656, device='cuda:0')
tensor(0.6656, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44424.62109375
content_loss = 84462.640625
stt_loss = 14988.818359375
tv_loss= 211.67788696289062
tensor(0.4192, device='cuda:0')
tensor(0.4192, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44441.15625
content_loss = 83580.28125
stt_loss = 14997.146484375
tv_loss= 211.6321258544922
tensor(0.6173, device='cuda:0')
tensor(0.6173, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44177.609375
content_loss = 82754.8125
stt_loss = 15286.4970703125
tv_loss= 212.2296142578125
tensor(0.6227, device='cuda:0')
tensor(0.6227, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44257.21875
content_loss = 82091.0625
stt_loss = 15127.2841796875
tv_loss= 211.85855102539062
tensor(0.8584, device='cuda:0')
tensor(0.8584, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43866.92578125
content_loss = 81419.9765625
stt_loss = 15464.20703125
tv_loss= 212.64915466308594
tensor(0.4427, device='cuda:0')
tensor(0.4427, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43991.50390625
content_loss = 80955.578125
stt_loss = 15154.060546875
tv_loss= 211.9366455078125
tensor(0.5628, device='cuda:0')
tensor(0.5628, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43495.47265625
content_loss = 80306.3125
stt_loss = 15675.7412109375
tv_loss= 213.1910400390625
tensor(0.7576, device='cuda:0')
tensor(0.7576, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43598.6796875
content_loss = 79731.71875
stt_loss = 15520.35546875
tv_loss= 212.80345153808594
tensor(0.4452, device='cuda:0')
tensor(0.4452, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43568.29296875
content_loss = 79215.0546875
stt_loss = 15528.1875
tv_loss= 212.8716278076172
tensor(0.5553, device='cuda:0')
tensor(0.5553, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43417.03125
content_loss = 78819.078125
stt_loss = 15554.875
tv_loss= 212.9385986328125
tensor(0.8858, device='cuda:0')
tensor(0.8858, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43145.11328125
content_loss = 78507.3203125
stt_loss = 15664.3466796875
tv_loss= 213.2655792236328
tensor(0.7993, device='cuda:0')
tensor(0.7993, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43114.3828125
content_loss = 78057.234375
stt_loss = 15658.8427734375
tv_loss= 213.29052734375
tensor(0.3509, device='cuda:0')
tensor(0.3509, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43040.046875
content_loss = 77624.484375
stt_loss = 15702.37109375
tv_loss= 213.45274353027344
tensor(0.3939, device='cuda:0')
tensor(0.3939, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43018.01953125
content_loss = 77144.6015625
stt_loss = 15769.892578125
tv_loss= 213.67955017089844
tensor(0.5377, device='cuda:0')
tensor(0.5377, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42907.7421875
content_loss = 76858.640625
stt_loss = 15772.099609375
tv_loss= 213.7317352294922
tensor(0.5757, device='cuda:0')
tensor(0.5757, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42820.32421875
content_loss = 76477.5
stt_loss = 15857.943359375
tv_loss= 214.01097106933594
tensor(0.4946, device='cuda:0')
tensor(0.4946, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42758.9375
content_loss = 76248.7734375
stt_loss = 15787.4208984375
tv_loss= 213.8715362548828
tensor(0.4402, device='cuda:0')
tensor(0.4402, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42516.2265625
content_loss = 75996.3515625
stt_loss = 15967.3603515625
tv_loss= 214.4552764892578
tensor(0.4867, device='cuda:0')
tensor(0.4867, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42561.671875
content_loss = 75727.1171875
stt_loss = 15856.6953125
tv_loss= 214.21641540527344
tensor(0.6203, device='cuda:0')
tensor(0.6203, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42449.84765625
content_loss = 75418.6796875
stt_loss = 15957.212890625
tv_loss= 214.62222290039062
tensor(0.5487, device='cuda:0')
tensor(0.5487, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42393.21484375
content_loss = 75199.671875
stt_loss = 15924.3466796875
tv_loss= 214.63369750976562
tensor(0.4354, device='cuda:0')
tensor(0.4354, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42240.28125
content_loss = 74991.1015625
stt_loss = 15995.830078125
tv_loss= 214.9551239013672
tensor(0.4837, device='cuda:0')
tensor(0.4837, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42241.11328125
content_loss = 74732.9921875
stt_loss = 15972.96875
tv_loss= 214.97265625
tensor(0.3741, device='cuda:0')
tensor(0.3741, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42102.8515625
content_loss = 74548.8984375
stt_loss = 16025.50390625
tv_loss= 215.2793426513672
tensor(0.5055, device='cuda:0')
tensor(0.5055, device='cuda:0')
========iter:  2 ============

 94%|████████████████████████████████████████████████████████████████████████████████████████████████▊      | 47/50 [00:01<00:00, 39.78it/s]
cpu cpu
check-input tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
check-input2 tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information

100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [00:13<00:00,  3.59it/s]
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 184 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
tensor(165.4639)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[2], line 1
----> 1 torch.max(torch.abs(prev_warped2))
NameError: name 'prev_warped2' is not defined
tensor(nan)
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
Ipython from line 103 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[1], line 1
----> 1 eixt
NameError: name 'eixt' is not defined
True 0
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 123651.984375
content_loss = 165923.109375
stt_loss = 0.0
tv_loss= 187.5921630859375
tensor(4.5772, device='cuda:0')
tensor(4.5772, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 123651.4609375
content_loss = 165922.65625
stt_loss = 8.891070102379217e-09
tv_loss= 187.5921630859375
tensor(4.5775, device='cuda:0')
tensor(4.5775, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 122339.46875
content_loss = 163628.9375
stt_loss = 0.42865657806396484
tv_loss= 187.6780242919922
tensor(4.4633, device='cuda:0')
tensor(4.4633, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 75057.9765625
content_loss = 138408.40625
stt_loss = 1249.7950439453125
tv_loss= 196.16897583007812
tensor(3.7601, device='cuda:0')
tensor(3.7601, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 63621.9765625
content_loss = 122751.09375
stt_loss = 2740.126708984375
tv_loss= 203.7139129638672
tensor(5.7665, device='cuda:0')
tensor(5.7665, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 58236.96875
content_loss = 113705.453125
stt_loss = 3364.951416015625
tv_loss= 206.49046325683594
tensor(1.4070, device='cuda:0')
tensor(1.4070, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 54405.40234375
content_loss = 108136.0234375
stt_loss = 3677.553466796875
tv_loss= 207.50157165527344
tensor(1.3996, device='cuda:0')
tensor(1.3996, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 51491.12890625
content_loss = 102675.484375
stt_loss = 4153.6328125
tv_loss= 208.63609313964844
tensor(1.1723, device='cuda:0')
tensor(1.1723, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 49470.16015625
content_loss = 98557.3125
stt_loss = 4873.71875
tv_loss= 210.30943298339844
tensor(1.7029, device='cuda:0')
tensor(1.7029, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 48107.671875
content_loss = 95558.484375
stt_loss = 5389.96484375
tv_loss= 211.439208984375
tensor(1.5138, device='cuda:0')
tensor(1.5138, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 47434.3671875
content_loss = 93045.796875
stt_loss = 5579.52685546875
tv_loss= 211.692138671875
tensor(1.0273, device='cuda:0')
tensor(1.0273, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 46554.53125
content_loss = 90876.34375
stt_loss = 5927.666015625
tv_loss= 212.25564575195312
tensor(0.6718, device='cuda:0')
tensor(0.6718, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 45792.68359375
content_loss = 88785.0078125
stt_loss = 6428.005859375
tv_loss= 213.2815399169922
tensor(0.8679, device='cuda:0')
tensor(0.8679, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44923.015625
content_loss = 87274.9140625
stt_loss = 6950.99560546875
tv_loss= 214.468017578125
tensor(1.0493, device='cuda:0')
tensor(1.0493, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44863.4140625
content_loss = 85543.703125
stt_loss = 7126.41162109375
tv_loss= 214.824951171875
tensor(0.6275, device='cuda:0')
tensor(0.6275, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44636.1953125
content_loss = 84199.546875
stt_loss = 7360.333984375
tv_loss= 215.20005798339844
tensor(0.6740, device='cuda:0')
tensor(0.6740, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 44208.15234375
content_loss = 83124.078125
stt_loss = 7633.1123046875
tv_loss= 215.6695556640625
tensor(0.5818, device='cuda:0')
tensor(0.5818, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43777.48046875
content_loss = 82191.75
stt_loss = 7883.33740234375
tv_loss= 216.13035583496094
tensor(0.7047, device='cuda:0')
tensor(0.7047, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43246.296875
content_loss = 81487.5703125
stt_loss = 8117.43310546875
tv_loss= 216.5461883544922
tensor(0.5724, device='cuda:0')
tensor(0.5724, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 43062.97265625
content_loss = 80696.4140625
stt_loss = 8244.146484375
tv_loss= 216.678466796875
tensor(0.5578, device='cuda:0')
tensor(0.5578, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42902.0390625
content_loss = 79910.0078125
stt_loss = 8420.36328125
tv_loss= 216.94241333007812
tensor(0.4222, device='cuda:0')
tensor(0.4222, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42591.87109375
content_loss = 79222.84375
stt_loss = 8642.0419921875
tv_loss= 217.32974243164062
tensor(0.7621, device='cuda:0')
tensor(0.7621, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42338.01953125
content_loss = 78562.015625
stt_loss = 8859.3759765625
tv_loss= 217.72988891601562
tensor(0.9751, device='cuda:0')
tensor(0.9751, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42201.671875
content_loss = 77950.6875
stt_loss = 8990.4892578125
tv_loss= 217.9400177001953
tensor(0.8021, device='cuda:0')
tensor(0.8021, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 42002.37109375
content_loss = 77426.1796875
stt_loss = 9144.5322265625
tv_loss= 218.2233123779297
tensor(0.3528, device='cuda:0')
tensor(0.3528, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41862.671875
content_loss = 76910.6640625
stt_loss = 9269.9716796875
tv_loss= 218.3982391357422
tensor(0.5539, device='cuda:0')
tensor(0.5539, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41589.3828125
content_loss = 76550.1875
stt_loss = 9392.263671875
tv_loss= 218.61172485351562
tensor(0.6339, device='cuda:0')
tensor(0.6339, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41475.97265625
content_loss = 76136.46875
stt_loss = 9461.3212890625
tv_loss= 218.6948699951172
tensor(0.3433, device='cuda:0')
tensor(0.3433, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41364.44921875
content_loss = 75656.2734375
stt_loss = 9601.6220703125
tv_loss= 218.95669555664062
tensor(0.4683, device='cuda:0')
tensor(0.4683, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41442.55859375
content_loss = 75115.84375
stt_loss = 9646.9013671875
tv_loss= 218.9900360107422
tensor(0.4095, device='cuda:0')
tensor(0.4095, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41175.703125
content_loss = 74781.015625
stt_loss = 9847.2138671875
tv_loss= 219.43833923339844
tensor(0.4330, device='cuda:0')
tensor(0.4330, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 41112.921875
content_loss = 74534.546875
stt_loss = 9791.7685546875
tv_loss= 219.2701873779297
tensor(0.5109, device='cuda:0')
tensor(0.5109, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40808.73046875
content_loss = 74271.71875
stt_loss = 10032.552734375
tv_loss= 219.80178833007812
tensor(0.4401, device='cuda:0')
tensor(0.4401, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40831.6015625
content_loss = 74061.703125
stt_loss = 9907.0263671875
tv_loss= 219.4815673828125
tensor(0.3234, device='cuda:0')
tensor(0.3234, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40637.99609375
content_loss = 73714.9453125
stt_loss = 10135.5
tv_loss= 220.00755310058594
tensor(0.3111, device='cuda:0')
tensor(0.3111, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40707.0
content_loss = 73414.1328125
stt_loss = 10064.470703125
tv_loss= 219.8285369873047
tensor(0.4233, device='cuda:0')
tensor(0.4233, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40555.53515625
content_loss = 73135.4140625
stt_loss = 10229.103515625
tv_loss= 220.22520446777344
tensor(0.5528, device='cuda:0')
tensor(0.5528, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40596.45703125
content_loss = 72873.9921875
stt_loss = 10194.138671875
tv_loss= 220.1282958984375
tensor(0.3125, device='cuda:0')
tensor(0.3125, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40458.33203125
content_loss = 72657.2109375
stt_loss = 10292.4375
tv_loss= 220.3691864013672
tensor(0.3879, device='cuda:0')
tensor(0.3879, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40417.21875
content_loss = 72457.109375
stt_loss = 10287.59765625
tv_loss= 220.3663787841797
tensor(0.3705, device='cuda:0')
tensor(0.3705, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40249.20703125
content_loss = 72293.03125
stt_loss = 10373.158203125
tv_loss= 220.6162567138672
tensor(0.3616, device='cuda:0')
tensor(0.3616, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40224.15234375
content_loss = 72073.5234375
stt_loss = 10393.83203125
tv_loss= 220.6974639892578
tensor(0.2834, device='cuda:0')
tensor(0.2834, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40105.7421875
content_loss = 71913.40625
stt_loss = 10459.8994140625
tv_loss= 220.87876892089844
tensor(0.3109, device='cuda:0')
tensor(0.3109, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40126.78125
content_loss = 71649.5390625
stt_loss = 10492.62109375
tv_loss= 220.99462890625
tensor(0.4482, device='cuda:0')
tensor(0.4482, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40061.953125
content_loss = 71485.1953125
stt_loss = 10518.1044921875
tv_loss= 221.0891571044922
tensor(0.3443, device='cuda:0')
tensor(0.3443, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 40034.5546875
content_loss = 71282.359375
stt_loss = 10560.794921875
tv_loss= 221.2606964111328
tensor(0.2982, device='cuda:0')
tensor(0.2982, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 39960.98046875
content_loss = 71179.5625
stt_loss = 10553.4755859375
tv_loss= 221.2897186279297
tensor(0.3383, device='cuda:0')
tensor(0.3383, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 39899.9453125
content_loss = 70985.3203125
stt_loss = 10626.533203125
tv_loss= 221.56309509277344
tensor(0.2707, device='cuda:0')
tensor(0.2707, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 39880.03125
content_loss = 70859.2265625
stt_loss = 10594.509765625
tv_loss= 221.56216430664062
tensor(0.3405, device='cuda:0')
tensor(0.3405, device='cuda:0')
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 39780.19140625
content_loss = 70663.484375
stt_loss = 10721.9384765625
tv_loss= 221.993896484375
tensor(0.4645, device='cuda:0')
tensor(0.4645, device='cuda:0')
========iter:  3 ============
Device being used: cuda
 94%|████████████████████████████████████████████████████████████████████████████████████████████████▊      | 47/50 [00:01<00:00, 41.76it/s]
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
File ~/CS337_Project/CS337_HCR/video_style.py:551
    543         image_style_transfer(
    544             f"{mid_dir}/{full_to_abbrev[video_name]}_frame_{i}.jpg",
    545             f'{in_dir}/{style_name}.{style_ext}',
   (...)
    548             num_steps=100
    549         )
    550     else:
--> 551         video_style_transfer = VideoStyleTransfer(img_size)
    552         video_style_transfer(
    553             f'{mid_dir}/{full_to_abbrev[video_name]}_frame_{i}.jpg',
    554             f'{in_dir}/{style_name}.{style_ext}',
   (...)
    559             num_steps=50
    560         )
    561 combine_as_gif(f'{full_to_abbrev[video_name]}_processed_frame_', 'jpg', mid_dir, out_dir, 1+(n_frames-1)//step, 1, f'{full_to_abbrev[video_name]}_{full_to_abbrev[style_name]}.gif')
File ~/CS337_Project/CS337_HCR/video_style.py:63, in VideoStyleTransfer.__init__(self, img_size)
     60 self.content_weights = {val:_content_wt_list[j] for j, val in enumerate(self.content_layers.values())}
     61 self.stt_weight = 2e2 # short term temporal consistency weight
---> 63 self.model = self.get_model()
     64 self.content_img = None
     65 self.style_img = None
File ~/CS337_Project/CS337_HCR/video_style.py:72, in VideoStyleTransfer.get_model(self)
     70 def get_model(self):
     71     weights = models.VGG19_Weights.DEFAULT
---> 72     model = models.vgg19(weights=weights, progress=True)
     73     model = model.to(self.device).eval().requires_grad_(False)
     74     return model
File ~/CS337_Project/lib/python3.9/site-packages/torchvision/models/_utils.py:142, in kwonly_to_pos_or_kw.<locals>.wrapper(*args, **kwargs)
    135     warnings.warn(
    136         f"Using {sequence_to_str(tuple(keyword_only_kwargs.keys()), separate_last='and ')} as positional "
    137         f"parameter(s) is deprecated since 0.13 and may be removed in the future. Please use keyword parameter(s) "
    138         f"instead."
    139     )
    140     kwargs.update(keyword_only_kwargs)
--> 142 return fn(*args, **kwargs)
File ~/CS337_Project/lib/python3.9/site-packages/torchvision/models/_utils.py:228, in handle_legacy_interface.<locals>.outer_wrapper.<locals>.inner_wrapper(*args, **kwargs)
    225     del kwargs[pretrained_param]
    226     kwargs[weights_param] = default_weights_arg
--> 228 return builder(*args, **kwargs)
File ~/CS337_Project/lib/python3.9/site-packages/torchvision/models/vgg.py:485, in vgg19(weights, progress, **kwargs)
    465 """VGG-19 from `Very Deep Convolutional Networks for Large-Scale Image Recognition <https://arxiv.org/abs/1409.1556>`__.
    466
    467 Args:
   (...)
    481     :members:
    482 """
    483 weights = VGG19_Weights.verify(weights)
--> 485 return _vgg("E", False, weights, progress, **kwargs)
File ~/CS337_Project/lib/python3.9/site-packages/torchvision/models/vgg.py:103, in _vgg(cfg, batch_norm, weights, progress, **kwargs)
    101     if weights.meta["categories"] is not None:
    102         _ovewrite_named_param(kwargs, "num_classes", len(weights.meta["categories"]))
--> 103 model = VGG(make_layers(cfgs[cfg], batch_norm=batch_norm), **kwargs)
    104 if weights is not None:
    105     model.load_state_dict(weights.get_state_dict(progress=progress, check_hash=True))
File ~/CS337_Project/lib/python3.9/site-packages/torchvision/models/vgg.py:44, in VGG.__init__(self, features, num_classes, init_weights, dropout)
     41 self.features = features
     42 self.avgpool = nn.AdaptiveAvgPool2d((7, 7))
     43 self.classifier = nn.Sequential(
---> 44     nn.Linear(512 * 7 * 7, 4096),
     45     nn.ReLU(True),
     46     nn.Dropout(p=dropout),
     47     nn.Linear(4096, 4096),
     48     nn.ReLU(True),
     49     nn.Dropout(p=dropout),
     50     nn.Linear(4096, num_classes),
     51 )
     52 if init_weights:
     53     for m in self.modules():
File ~/CS337_Project/lib/python3.9/site-packages/torch/nn/modules/linear.py:101, in Linear.__init__(self, in_features, out_features, bias, device, dtype)
     99 else:
    100     self.register_parameter('bias', None)
--> 101 self.reset_parameters()
File ~/CS337_Project/lib/python3.9/site-packages/torch/nn/modules/linear.py:107, in Linear.reset_parameters(self)
    103 def reset_parameters(self) -> None:
    104     # Setting a=sqrt(5) in kaiming_uniform is the same as initializing with
    105     # uniform(-1/sqrt(in_features), 1/sqrt(in_features)). For details, see
    106     # https://github.com/pytorch/pytorch/issues/57109
--> 107     init.kaiming_uniform_(self.weight, a=math.sqrt(5))
    108     if self.bias is not None:
    109         fan_in, _ = init._calculate_fan_in_and_fan_out(self.weight)
File ~/CS337_Project/lib/python3.9/site-packages/torch/nn/init.py:419, in kaiming_uniform_(tensor, a, mode, nonlinearity)
    417 bound = math.sqrt(3.0) * std  # Calculate uniform bounds from standard deviation
    418 with torch.no_grad():
--> 419     return tensor.uniform_(-bound, bound)

100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [00:02<00:00, 22.27it/s]