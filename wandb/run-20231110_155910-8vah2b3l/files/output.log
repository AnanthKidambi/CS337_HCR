========iter:  0 ============
Device being used: cuda
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan:
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
========iter:  1 ============

100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:02<00:00, 42.29it/s]
cpu cpu
check-input tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
check-input2 tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
True 0
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)
style_loss = 98959.2265625
content_loss = 320396.5625
stt_loss = 0.0
aRIP
  2%|██                                                                                                      | 1/50 [00:00<00:00, 52.17it/s]