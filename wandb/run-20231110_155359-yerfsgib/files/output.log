========iter:  0 ============
Device being used: cuda
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan:
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
========iter:  1 ============

100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 100/100 [00:02<00:00, 44.26it/s]
cpu cpu
check-input tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
check-input2 tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], device='cuda:0', size=(0, 4), dtype=torch.int64) tensor([], size=(0, 4), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64) tensor([], size=(0, 3), dtype=torch.int64)
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
True 0
nan: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
DUH: [tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64), tensor([], device='cuda:0', size=(0, 2), dtype=torch.int64)]
Ipython from line 276 of video_style.py
Python 3.9.2 (default, Feb 28 2021, 17:03:44)
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
  0%|                                                                                                                | 0/50 [00:00<?, ?it/s]